<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"		>

<context:component-scan base-package="kr">
	<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
	<context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
</context:component-scan>

<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

<!-- 상단의 component scan을 쓰기 때문에 이 콤포넌트에서는 굳이 아래와 같이 bean을 add 해 줄 필요가 없다 -->
<!-- 향후 새롭게 context xml을 추가해도 이 상황을 고려해 보면 될 것 같다 -->
<!--  
<bean id="customAuthenticationProvider" class="kr.or.hrdkorea.itsm.user.cmmn.CustomAuthenticationProvider" />
<bean id="itsmUserDetailsService" class="kr.or.hrdkorea.itsm.user.service.impl.ItsmUserDetailsService" />
<bean id="sysUserService" class="kr.or.hrdkorea.itsm.user.service.impl.SysUserServiceImpl" />
<bean id="authTokenUtil" class="kr.or.hrdkorea.itsm.user.cmmn.AuthTokenUtil"/>
<bean id="tokenRequestFilter" class="kr.or.hrdkorea.itsm.user.cmmn.TokenRequestFilter"/>
-->

<!-- 이 설정은 cors 옵션이라서 아마 운영에서는 필요가 없을 수 있다. -->
<!-- 크로스 도메인 설정이 되었고, ajax가 호출이 되나, 리엑트 화면에서 security의 경우 필터 후 react 로그인 화면에서 크로스도메인 이슈가 발생함. 
이슈 해결을 위해서 react 개발 환경에서 cors 모듈설치하며 proxy 설정됨. 아래의 문구는 주석 처리 함-->
<!--  
<bean id="corsSource" class="org.springframework.web.cors.UrlBasedCorsConfigurationSource">
    <property name="corsConfigurations">
        <util:map>
            <entry key="/**">
                <bean class="org.springframework.web.cors.CorsConfiguration">
                    <property name="allowCredentials" value="true" />
                    <property name="allowedHeaders">
                        <list>
                            <value>Authorization</value>
                            <value>Content-Type</value>
                        </list>
                    </property>
                    <property name="allowedMethods">
                        <list>
                            <value>POST</value>
                            <value>GET</value>
                            <value>PUT</value>
                            <value>DELETE</value>
                        </list>
                    </property>
                    <property name="allowedOrigins" value="http://localhost:3000" />
                    <property name="exposedHeaders">
                        <list>
                            <value>Location</value>
                            <value>Content-Disposition</value>
                        </list>
                    </property>
                    <property name="maxAge" value="86400" />
                </bean>
            </entry>
        </util:map>
    </property>
</bean>
-->

<!-- 에러시 redirect 하는 부분의 처리를 위해서 아래의 entry point 말고 custom 클래스를 사용한다. -->
<!--
<bean id="loginUrlAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
    <constructor-arg value="http://localhost:3000/error"/>
</bean>
-->
<bean id="ItsmAuthenticationEntryPoint" class="kr.or.hrdkorea.itsm.user.cmmn.ItsmAuthenticationEntryPoint">
</bean>

<security:authentication-manager alias="authenticationManager"> 
	<security:authentication-provider ref="customAuthenticationProvider" /> 
</security:authentication-manager>


<!-- 이 설정은 React 방식이 아닌 Form 기반의  API 로그인 화면을 위한 설정이다. -->
<!-- filterProcessesUrl이걸 설정하면  /auth/login 으로 들어온 호출에 대해서 경로를 무시하고 provider를 탄다 -->
<!--  
<bean id="customUsernamePasswordAuthenticationFilter"
            class="kr.or.hrdkorea.itsm.user.cmmn.CustomUsernamePasswordAuthenticationFilter">
    <property name="authenticationManager" ref="authenticationManager"/>
    <property name="filterProcessesUrl" value="/auth/login"/>
</bean>
-->

<security:http auto-config="false" use-expressions="true" 
		entry-point-ref="ItsmAuthenticationEntryPoint" authentication-manager-ref="authenticationManager">
	<security:csrf disabled="true"/>
	<!-- 
	<security:intercept-url pattern="/test/*" access="hasRole('ROLE_USER')" />
	-->
	<!-- 이게 없어도 되네? 이유는 상단에 /test/* 경로만 ROLE_USER를 적용했기 때문인 것 같다. -->
	<security:intercept-url pattern="/auth/*" access="permitAll()" />
	<security:intercept-url pattern="/**" access="hasRole('ROLE_USER')" />

	<!-- 이 설정은 React 방식이 아닌 Form 기반의 API 로그인 화면을 위한 설정이다. -->
	<!--  
    <security:custom-filter position="FORM_LOGIN_FILTER" ref="customUsernamePasswordAuthenticationFilter"/>
    -->
    <security:custom-filter before="FORM_LOGIN_FILTER" ref="tokenRequestFilter" />
    <!-- 이 설정은 크로스 도메인 관련 설정이라서 아마 운영에서는 필요가 없을 수 있다. -->
    <!-- 크로스 도메인 설정이 되었고, ajax가 호출이 되나, 리엑트 화면에서 security의 경우 필터 후 react 로그인 화면에서 크로스도메인 이슈가 발생함. 
         이슈 해결을 위해서 react 개발 환경에서 cors 모듈설치하며 proxy 설정됨. 아래의 문구는 주석 처리 함-->
    <!--
    <security:intercept-url method="OPTIONS" pattern="/**" access="isAnonymous()"/>
    <security:cors configuration-source-ref="corsSource" />
    -->
</security:http>


</beans>
